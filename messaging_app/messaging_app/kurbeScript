#!/bin/bash

# kurbeScript - Kubernetes Local Setup and Verification
# File: messaging_app/kurbeScript
# Repository: alx-backend-python

set -e  # Exit on any error

echo "=========================================="
echo "Kubernetes Local Setup Script"
echo "=========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if minikube is installed
check_minikube() {
    print_status "Checking if minikube is installed..."
    if command_exists minikube; then
        MINIKUBE_VERSION=$(minikube version --short)
        print_success "Minikube is installed: $MINIKUBE_VERSION"
        return 0
    else
        print_error "Minikube is not installed!"
        return 1
    fi
}

# Function to install minikube on Windows
install_minikube() {
    print_status "Installing minikube..."
    
    # Check if we're on Windows (Git Bash/WSL)
    if [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]] || [[ -n "$WSL_DISTRO_NAME" ]]; then
        print_status "Detected Windows environment"
        
        if command_exists winget; then
            print_status "Installing minikube using winget..."
            winget install Kubernetes.minikube
        elif command_exists choco; then
            print_status "Installing minikube using chocolatey..."
            choco install minikube
        else
            print_warning "Neither winget nor chocolatey found."
            print_status "Please install minikube manually:"
            echo "1. Download from: https://minikube.sigs.k8s.io/docs/start/"
            echo "2. Or use: winget install Kubernetes.minikube"
            echo "3. Or use: choco install minikube"
            exit 1
        fi
    else
        print_error "This script is designed for Windows. Please install minikube manually."
        exit 1
    fi
}

# Function to check if kubectl is installed
check_kubectl() {
    print_status "Checking if kubectl is installed..."
    if command_exists kubectl; then
        KUBECTL_VERSION=$(kubectl version --client --short 2>/dev/null | head -1)
        print_success "kubectl is installed: $KUBECTL_VERSION"
        return 0
    else
        print_warning "kubectl is not installed!"
        print_status "kubectl will be available through minikube kubectl"
        return 1
    fi
}

# Function to start minikube cluster
start_cluster() {
    print_status "Starting Kubernetes cluster with minikube..."
    
    # Check if cluster is already running
    if minikube status >/dev/null 2>&1; then
        print_warning "Minikube cluster is already running"
        minikube status
    else
        print_status "Starting new minikube cluster..."
        # Start minikube with recommended settings for development
        minikube start \
            --driver=hyperv \
            --memory=4096 \
            --cpus=2 \
            --disk-size=20g \
            --kubernetes-version=stable
        
        print_success "Minikube cluster started successfully!"
    fi
}

# Function to verify cluster is running
verify_cluster() {
    print_status "Verifying cluster status..."
    
    echo ""
    print_status "Cluster Information:"
    echo "----------------------------------------"
    kubectl cluster-info
    
    echo ""
    print_status "Cluster Status:"
    echo "----------------------------------------"
    minikube status
    
    echo ""
    print_status "Node Information:"
    echo "----------------------------------------"
    kubectl get nodes -o wide
}

# Function to retrieve available pods
get_pods() {
    print_status "Retrieving available pods..."
    
    echo ""
    print_status "Pods in all namespaces:"
    echo "----------------------------------------"
    kubectl get pods --all-namespaces
    
    echo ""
    print_status "Pods in default namespace:"
    echo "----------------------------------------"
    kubectl get pods
    
    if [ $(kubectl get pods --no-headers | wc -l) -eq 0 ]; then
        print_warning "No pods found in default namespace"
        print_status "This is normal for a fresh cluster"
    fi
}

# Function to display useful commands
show_next_steps() {
    echo ""
    print_success "Kubernetes cluster is ready!"
    echo ""
    print_status "Useful commands:"
    echo "----------------------------------------"
    echo "• Check cluster status: minikube status"
    echo "• Access Kubernetes dashboard: minikube dashboard"
    echo "• Stop cluster: minikube stop"
    echo "• Delete cluster: minikube delete"
    echo "• SSH into minikube: minikube ssh"
    echo "• Get cluster IP: minikube ip"
    echo ""
    
    if ! command_exists kubectl; then
        print_status "Since kubectl is not installed globally, use:"
        echo "• minikube kubectl -- [kubectl commands]"
        echo "• Or install kubectl: winget install Kubernetes.kubectl"
    fi
    
    echo ""
    print_status "Example pod deployment:"
    echo "----------------------------------------"
    if command_exists kubectl; then
        echo "kubectl run hello-world --image=nginx --port=80"
        echo "kubectl expose pod hello-world --type=NodePort --port=80"
        echo "minikube service hello-world --url"
    else
        echo "minikube kubectl -- run hello-world --image=nginx --port=80"
        echo "minikube kubectl -- expose pod hello-world --type=NodePort --port=80"
        echo "minikube service hello-world --url"
    fi
}

# Main execution
main() {
    print_status "Starting Kubernetes local setup..."
    
    # Step 1: Check/Install minikube
    if ! check_minikube; then
        install_minikube
        
        # Verify installation
        if ! check_minikube; then
            print_error "Failed to install minikube. Please install manually."
            exit 1
        fi
    fi
    
    # Step 2: Check kubectl (optional, minikube provides it)
    check_kubectl
    
    # Step 3: Start cluster
    start_cluster
    
    # Step 4: Verify cluster is running
    verify_cluster
    
    # Step 5: Retrieve pods
    get_pods
    
    # Step 6: Show next steps
    show_next_steps
    
    print_success "Script completed successfully!"
}

# Error handling
trap 'print_error "Script failed at line $LINENO"' ERR

# Run main function
main "$@"